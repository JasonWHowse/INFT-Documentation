Login Screen
F1.0.0 User shall be able to log in.
F1.1.0 The System shall set the UI height and width.
F1.1.1 The System shall set the UI height to 160px.
F1.1.2 The System shall set the UI width to 400px.
F1.2.0 User shall be able log into an environment.
F1.2.1 User shall be able to choose an environment.
F1.2.2 The System shall configure the local environment to connect to RPC Server HTTP://127.0.0.1:7545 Network ID/Chain ID 5777.
F1.2.3 The System shall configure the test environment to connect to RPC Server https://ropsten.infura.io/v3/c403a4afb4f5439588595f1f242e7c75 Network ID/Chain ID 3.
F1.2.4 The System shall configure the main net environment to connect to  https://mainnet.infura.io/v3/c403a4afb4f5439588595f1f242e7c75 Network ID/Chain ID 1.
F1.2.5 If no environment is chosen and the login button is clicked, the System shall pop a toast message error requesting the user to choose an environment.
F1.2.6 The System shall configure the current environment based on the User's envrionment selection.
F1.3.0 User shall be able log in with a private key hex key.
F1.3.1 If an environment is selected, no key entered, and the login button is clicked, the System shall pop a toast message error requesting the user enter a private key.
F1.3.2 If an environment is selected, the key contains non hex characters, and the login button is clicked, the System shall pop a toast message error stating the private key is invalid.
F1.3.3 If the selected network is unavailable, then the System shall pop a toast error message stating the environment is not available and details will be printed to the log file.
F1.4.0 If login is successful, then the System shall pop a toast with the current address's balance.
F1.4.1 If the account balance is greater than 0, then the System shall use the primary toast message format and show the balance.
F1.4.2 If the account balance is 0, then the System shall use the warning toast message format and warn the user that the current balance is 0.
F1.4.3 The System shall populate a combo box will all NFTs associated with the users address.
F1.4.4 The user's private key shall be held as a variable in memory.
F1.5.0 The System shall expand UI height and width.
F1.5.1 The System shall set the UI height to 450px.
F1.5.2 The System shall set the UI width to 800px.
F1.6.0 The System shall instatiate a Logout button, a browse button, a file text box, and a NFT combo box.

Mint NFT
F2.0.0 The User shall be able to mint a file.
F2.1.0 The User shall be able to select a file.
F2.1.1 The User shall be able to write a file name into the text box.
F2.1.2 The User shall be able to pick a file from the file picker.
F2.1.2 The System shall remove the image or text displayed when the text box is updated.
F2.2.0 The System shall display image files.
F2.2.1 If the file bytecode type is "webp", "jpeg", "png", "gif", or "jpg", then the System shall display the image.
F2.3.0 The System shall display plain text files.
F2.3.1 If the file bytecode type is "txt", "html", "xml", "css", "js", "htm", or "json", then the System shall display the text.
F2.4.0 If there is any text in the file text box, then the System shall make the mint button available.
F2.4.1 If the file does not exists then, then the System shall pop a toast message error stating no such file exists.
F2.4.2 If the file does exists, the the System shall attemp to pin the file to the IPFS network.
F2.4.3 If the file does not successfully pin to the IPFS network, the System shall pop a toast message error stating the the file did not post to IPFS and post the error to the log file.
F2.4.4 If the files successfully pins to the IPFS network, the System shall take the hash code generated and attempt to mint a token to the Ethereum network.
F2.4.5 If the system successfully mints the token, the System shall pop a toast message primary stating Success!
F2.4.6 If the system fails to mint the token, the System shall pop a toast message error stating the item failed to mint and point error logs to the log file.
F2.4.5 The System shall populate a combo box will all NFTs associated with the users address.

Get NFT
F3.0.0 The User shall be able to select any nft from the combo box.
F3.1.0 If the user selects an NFT, the System shall download the NFT to the local system.
F3.1.1 The System shall assign a generic name to the file.
F3.1.2 The System shall use miming to determine the file type is and assign the propper extension to the file.
F3.2.0 The System shall display image files.
F3.2.1 If the file bytecode type is "webp", "jpeg", "png", "gif", or "jpg", then the System shall display the image.
F3.3.0 The System shall display plain text files.
F3.3.1 If the file bytecode type is "txt", "html", "xml", "css", "js", "htm", or "json", then the System shall display the text in a text block.
F3.4.0 The System shall post the file name to a text box.
F3.5.0 The User shall be able to copy the file path to the clip board.


Transfer NFT (Not Implemented)
F4.0.0 Not Impletemented.

Logout
F5.0.0 The user shall be able to logout.
F5.1.0 The system shall set the account value to null.
F5.2.0 The system shall set user environment to null.
F5.3.0 The system shall set to the generic environment settings.
F5.3.0 The system shall display the Login screen.

Logging
F6.0.0 The System shall maintain a log of important events.
F6.1.0 The System shall record important events as info events.
F6.1.1 The System shall log a record that will display the url to the item posted to IPFS.
F6.1.2 The System shall log a record the transaction hash.
F6.2.0 The System shall record system errors from the MainWindow.xaml class as error events.
F6.2.1 The System shall log a record when the environment fails to connct.
F6.2.2 The System shall log a record when an error occurs during login.
F6.2.3 The System shall log a record when the System fails to display an image.
F6.2.4 The System shall log a record when the System fails to display a plain text file
F6.2.5 The System shall log a record when the System fails to get a file from the IPFS network.
F6.2.6 The System shall log a record when the System fails to pin a file to IPFS.
F6.2.7 The System shall log a record when the System fails to mint a token to the Ethereum network.
F6.3.0 The System shall record system errors from the Etherium_Interact class as error events.
F6.3.1 The System shall log a record when the System fails to create a local web3 object.
F6.3.2 The System shall log a record when the System fails to create a test web3 object.
F6.3.3 The System shall log a record when the System fails to create a production web3 object.
F6.3.4 The System shall log a record when the System has an error when checking that a token is associated with a particular class.
F6.3.5 The System shall log a record when the System has an error minting the token.
F6.4.0 The System shall record system errors from the Helpers class as error events.
F6.4.1 The System shall log a record when the System fails to deseialize the json object selected.
F6.5.0 The System shall record system errors from the IPFS_Interact class as error event.
F6.5.1 The System shall log a record when the System fails to write the IPFS file to local storage.
F6.5.2 The System shall log a record when the System fails to convert a stream to byte array or the mime guesser throws an error.
F6.5.3 The System shall log a record when the System fails to pin a file to IPFS.
F6.5.4 The System shall log a record when the System fails trying to delete all stored files.